<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tvision2docs â€“ Documentation</title><link>/docs/</link><description>Recent content in Documentation on tvision2docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Hello world!</title><link>/docs/intro/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/intro/hello-world/</guid><description>
&lt;p>Let&amp;rsquo;s see how we can create a &amp;ldquo;Hello World&amp;rdquo; program using TVision2. First, the code:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">Microsoft.Extensions.Hosting&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">System&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">System.Threading.Tasks&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">Microsoft.Extensions.DependencyInjection&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">Tvision2.Core&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">Tvision2.Core.Colors&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">Tvision2.Core.Components&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">Tvision2.Core.Render&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">namespace&lt;/span> &lt;span style="color:#000">Tvision2.HelloWorld&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">internal&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Program&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">async&lt;/span> &lt;span style="color:#000">Task&lt;/span> &lt;span style="color:#000">Main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">builder&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">HostBuilder&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">builder&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UseTvision2&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">setup&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">setup&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UseDotNetConsoleDriver&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">setup&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Options&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UseStartup&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">sp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">tui&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">helloWorld&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TvComponent&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello world!&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddDrawer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DrawStringAt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">State&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">TvPoint&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Zero&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TvColorPair&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvColor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Blue&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">TvColor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Yellow&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddViewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Viewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvPoint&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FromXY&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#000">tui&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UI&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">Task&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">CompletedTask&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#000;font-weight:bold">}).&lt;/span>&lt;span style="color:#000">UseConsoleLifetime&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">builder&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">RunTvisionConsoleApp&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code the &lt;code>Hello world!&lt;/code> string at position (10,10) with a blue foreground and a yellow background. Yes, probably you are thinking &amp;ldquo;that&amp;rsquo;s a lot of code for just printing a string&amp;rdquo; and you are true, but this is just because the sample is too simple to show all TVision2 power. But anyway, let&amp;rsquo;s see the main components of it.&lt;/p>
&lt;p>First, you need to configure some aspects of TVision2 before starting your app. This is done through the extension method &lt;code>UseTvision2&lt;/code> of the &lt;code>IHostBuilder&lt;/code> interface. That method expects an &lt;code> Action&amp;lt;Tvision2Setup&amp;gt;&lt;/code> with the setup code. In this case we are using the &lt;code>UseDotNetConsoleDriver&lt;/code> that forces TVision2 to use the pure netcore-based console driver. A console driver is how TVision2 will interact with the real console (as you will see, as a developer, you never access directly to the console). There are various console drivers, each one with their weaknesses and strenghtnesses.&lt;/p>
&lt;p>Then, we are using the simplest way to start the application which is using the &lt;code>UseStartup&lt;/code> method to provide the code of our application. On more complex applications another way (using a separated &lt;em>startup&lt;/em> class) is preferred. When using &lt;code>UseStartup&lt;/code> you have access to two parameters: an &lt;code>IServiceProvider&lt;/code> which gives you access to some TVision2 objects and a &lt;code>ITuiEngine&lt;/code> wich holds the TVision2 engine. In the &lt;code>UseStartup&lt;/code> method we do following things:&lt;/p>
&lt;ol>
&lt;li>Create a &lt;code>TvComponent&amp;lt;string&amp;gt;&lt;/code> class. This creates a &lt;em>component&lt;/em> that holds an &lt;code>string&lt;/code> object. Components are the main objects in TVision2: your application is composed of a set of components that interact. All components are instances of the &lt;strong>sealed&lt;/strong> &lt;code>TvComponent&amp;lt;T&amp;gt;&lt;/code> class. TVision2 prefers composition over inheritance, so &lt;strong>you can&amp;rsquo;t inherit from &lt;code>TvComponent&amp;lt;T&amp;gt;&lt;/code>&lt;/strong>.&lt;/li>
&lt;li>Then we add a drawer to our component. A drawer is a piece of code that draws the component to a &lt;em>viewport&lt;/em>. All drawers use the methods provide in the &lt;code>RenderContext&lt;/code> class to draw to the &lt;em>viewport&lt;/em>. In this sample the viewport is located at coords (10,10) and have a bounds of 30 cols and one row.&lt;/li>
&lt;li>Then we use the &lt;code>AddViewport&lt;/code> method to add a &lt;em>viewport&lt;/em> to the component. A &lt;em>viewport&lt;/em> is a region (position, bounds and layer) in the console window. A component can only draw in its own &lt;em>viewport&lt;/em>.&lt;/li>
&lt;li>Finally we add the component to the &lt;em>component tree&lt;/em> using the &lt;code>Add&lt;/code> method of the &lt;code>UI&lt;/code> property of the engine. The component is now added to the tree and TVision2 will begin drawing it.&lt;/li>
&lt;/ol>
&lt;p>Congratulations! You have finished your first TVision2 app! Now, we&amp;rsquo;ll do some changes to it to see some of the TVision2 characteristics :)&lt;/p>
&lt;h2 id="updating-a-component">Updating a component&lt;/h2>
&lt;p>If you put a breakpoint in the &lt;code>ctx.Drawstring&lt;/code> line you&amp;rsquo;ll see that &lt;strong>the breakpoint is only hit once&lt;/strong>. This is because once a component is drawn, it won&amp;rsquo;t be drawn again &lt;strong>until it changes&lt;/strong>. This raises the question on how TVision2 knows if a component &amp;ldquo;has changed&amp;rdquo; and need to be redrawn. Well, a component needs to be redrawn if &lt;strong>its state has changed&lt;/strong>. The &amp;ldquo;state&amp;rdquo; of a component is the additional object it holds (in our example is a string, because we are using a &lt;code>TvComponent&amp;lt;string&amp;gt;&lt;/code> object). For changing a state of a component there is a &lt;code>SetState&lt;/code> method. However &lt;strong>this won&amp;rsquo;t work&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddDrawer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DrawStringAt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">State&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">TvPoint&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Zero&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TvColorPair&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvColor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Blue&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">TvColor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Yellow&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetState&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello world! &amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Random&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">Next&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is &lt;strong>a very bad practice&lt;/strong>. You should never access to the component from inside the &lt;code>AddDrawer&lt;/code> method (in this case you have access to it because this is a sample code, but in more complex applications, usually the drawer do not have access to the reference that holds the component). Anyway, this does not work because &lt;strong>TVision2 assumes that drawing the component NEVER change its state&lt;/strong>. TVision2 has an specific way to change the state of a component, which is &lt;strong>using a behavior&lt;/strong>. We will use the &lt;code>AddStateBehavior&lt;/code> method to add a behavior to a component:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddStateBehavior&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Hello world &amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Random&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">Next&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you run the application again you will see how the content of the label is changing continuously.&lt;/p>
&lt;blockquote>
&lt;p>Note that we don&amp;rsquo;t call the &lt;code>SetState&lt;/code> method of the &lt;code>TvComponent&lt;/code>. The &lt;code>SetState&lt;/code> method is rarely used, but it is provided to some advanced scenarios. The standard way to update a component is using a behavior.&lt;/p>
&lt;/blockquote>
&lt;p>A component &lt;strong>can have zero or more behaviors&lt;/strong> and there are many ways to add a behavior to a component. We have used the &lt;code>AddStateBehavior(Func&amp;lt;T,T&amp;gt;)&lt;/code> method which is the simplest one, but there are other ways. We will discuss all of them in the behaviors section.&lt;/p>
&lt;blockquote>
&lt;p>Remember: To change the state of a component &lt;strong>try to use always a behavior&lt;/strong>. Use &lt;code>SetState&lt;/code> method, only when you need to change the state of another component.&lt;/p>
&lt;/blockquote>
&lt;h2 id="adding-more-than-one-viewport">Adding more than one viewport&lt;/h2>
&lt;p>A component can have more than one viewport:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddViewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Viewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvPoint&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FromXY&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddViewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Viewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvPoint&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FromXY&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddViewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Viewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvPoint&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FromXY&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">20&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">13&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you run the code, you will see &lt;strong>three labels&lt;/strong> all with the same content and changing at the same time.&lt;/p></description></item><item><title>Docs: The Component Tree</title><link>/docs/core/component-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/core/component-tree/</guid><description>
&lt;p>The &lt;em>component tree&lt;/em> is a structure in memory that holds all the &lt;em>components&lt;/em> and their relationships. There is a single &lt;em>component tree&lt;/em> per each TVision2 application, and you can access to it using the &lt;code>UI&lt;/code> property from the &lt;code>ITuiEngine&lt;/code>. The &lt;em>component tree&lt;/em> is responsible for:&lt;/p>
&lt;ul>
&lt;li>Holding all &lt;em>components&lt;/em> of the application&lt;/li>
&lt;li>Mantaining their relationships&lt;/li>
&lt;/ul>
&lt;h2 id="adding-components-to-the-tree">Adding components to the tree&lt;/h2>
&lt;p>You can create a &lt;em>component&lt;/em> (instance of &lt;code>TvComponent&amp;lt;TState&amp;gt;&lt;/code> class) at any time, but until you don&amp;rsquo;t add the component to the &lt;em>component tree&lt;/em> it do not exists as for TVision2 concerns. Howerver creating a component and adding it to the tree are two separate steps.&lt;/p>
&lt;p>When you add a component to the tree &lt;strong>you specify the relationship to this component from other component&lt;/strong>. This is a very important concept in TVision2, so take time to assimilate it: the relationships between components are defined when you add components to the tree. You can create parent/child relationships but the components participating in those relationships are unaware of that: the relationship is maintained in the tree, not in the &lt;em>component&lt;/em> itself.&lt;/p>
&lt;p>You can add a component in the tree by calling one of the &lt;em>Add&lt;/em> methods:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">TvComponentMetadata&lt;/span> &lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvComponent&lt;/span> &lt;span style="color:#000">componentToAdd&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Action&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">AddComponentOptions&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">addOptions&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">TvComponentMetadata&lt;/span> &lt;span style="color:#000">AddAfter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvComponent&lt;/span> &lt;span style="color:#000">componentToAdd&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">TvComponent&lt;/span> &lt;span style="color:#000">componentBefore&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">TvComponentMetadata&lt;/span> &lt;span style="color:#000">AddAsChild&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvComponent&lt;/span> &lt;span style="color:#000">componentToAdd&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">TvComponent&lt;/span> &lt;span style="color:#000">parent&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Action&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">IAddChildComponentOptions&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">options&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>AddAfter&lt;/code> and &lt;code>AddAsChild&lt;/code> methods are just offered for convenience as you could do everything using only the &lt;code>Add&lt;/code> method.&lt;/p>
&lt;blockquote>
&lt;p>You &lt;strong>can&lt;/strong> add a child component before adding its parent, but the operation won&amp;rsquo;t be effective until you add the parent.&lt;/p>
&lt;/blockquote>
&lt;p>By default if a component is added as a child of another component:&lt;/p>
&lt;ol>
&lt;li>If the parent component is not added yet, the add operation is delayed until the parent component is added.&lt;/li>
&lt;li>The parent component is notified when the child is added&lt;/li>
&lt;li>When the parent component is deleted, all their childs are deleted too&lt;/li>
&lt;li>A child component &lt;em>can&lt;/em> prevent the deletion of its parent. In this case no components are deleted.&lt;/li>
&lt;/ol>
&lt;p>When adding a component using the &lt;code>Add&lt;/code> method, you can use the &lt;code>addOptions&lt;/code> parameter to specify additional options like if this component has parent (same as calling &lt;code>AddAsChild&lt;/code>), if it has to be added after other component (same like &lt;code>AddAfter&lt;/code>) or pass some aditional action to be performed when the component is effectively added.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">componentTree&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mycomponent&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">options&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">options&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithParent&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">parentComponent&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">childOpt&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">childOpt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DoNotNotifyParentOnAdd&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">childOpt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">RetrieveParentStatusChanges&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code adds the &lt;code>mycomponent&lt;/code> as child of &lt;code>parentComponent&lt;/code> and sets the additional options to not notify the parent component that this component is added as its child and that they need to be invalidated if its parent component gets invalidated too (this is useful if the state of the child component have some dependency to the state of its parent).&lt;/p>
&lt;blockquote>
&lt;p>Remember: Adding components is an &lt;strong>asyncronous operation&lt;/strong>. Once the &lt;code>Add&lt;/code> method finishes the component is not yet added in the &lt;em>component tree&lt;/em> (just queued to be added).&lt;/p>
&lt;/blockquote>
&lt;h2 id="removing-components-from-the-tree">Removing components from the tree&lt;/h2>
&lt;p>Removing a component from the tree is performed by calling the &lt;code>Remove&lt;/code> method:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">Remove&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvComponent&lt;/span> &lt;span style="color:#000">component&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Like adding a component, removing a component is an asynchronous operation. The &lt;code>Remove&lt;/code> method just queues a component to be removed. The method returns &lt;code>false&lt;/code> if the component is not found.&lt;/p>
&lt;blockquote>
&lt;p>When a component is deleted all their childs are deleted too. &lt;strong>First are deleted the childs and finally the component itself&lt;/strong>.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: What is Tvision2</title><link>/docs/what-is-tvision2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/what-is-tvision2/</guid><description>
&lt;p>TVision2 is a &lt;strong>netstandard&lt;/strong> library created to help you building cross platform console applications with a rich &lt;a href="https://en.wikipedia.org/wiki/Text-based_user_interface">TUI&lt;/a>.&lt;/p>
&lt;h2 id="why-tvision2-was-created">Why TVision2 was created?&lt;/h2>
&lt;p>This is a great question. Currently there are some other awesome netstandard libraries out there that have more or less the same purpose that Tvision2:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/migueldeicaza/gui.cs">Gui.cs&lt;/a>: This is probably the most known project. It&amp;rsquo;s created and mantained by &lt;a href="https://twitter.com/migueldeicaza">Miguel De Icaza&lt;/a>. Gui.cs acted as a inspiration from TVision2 and some of the Miguel&amp;rsquo;s code (like Mono.curses) is currently used in TVision2.Its maturity state is more advanced than the TVision2 one. However TVision2 offers new capabalities and characteristics that outerperform Gui.cs&lt;/li>
&lt;/ul>
&lt;h2 id="what-makes-tvision2-special">What makes TVision2 special?&lt;/h2>
&lt;p>Of coure I am highly biased here, but TVision2 was designed since the beginning with the &lt;em>pay only what do you use&lt;/em> rule. The core of TVision2 offers you a rich set of mechanisms to build console applications using a game loop approach. Core do not have the concepts of event-driven actions and no &amp;ldquo;controls&amp;rdquo; like textboxes or lists are provided. Based on the services provided by core, TVision2.Controls provide a set of controls (like textboxes, lists, dropdowns, etc). You can choose to use TVision2.Controls or not, based on what do you need. If you are building an &amp;ldquo;application&amp;rdquo; probably would want to use controls, but if you are building a console-based game, maybe you wan&amp;rsquo;t. However the decision is up to you. Same happens with the Layout mechanism. Core only offers absolute positioning, but you can use TVision2.Layouts to get relative layouts like stack panels, grids and so on. You can use Layouts with or without controls and vice-versa.&lt;/p>
&lt;p>Also TVision2 supports not only 256 colors but also true color. It adapts to the characteristics of OS:&lt;/p>
&lt;ul>
&lt;li>In Windows 7 the Windows API console is used and applications are limited to 16 colors. Using some console manager like ConEmu is possible to run the application in 256 colors.&lt;/li>
&lt;li>In Windows 10 the new VT enabled console API is used, and applications can have 256 colors or true color.&lt;/li>
&lt;li>In Linux, application can choose to use NCurses (limited to 256 colors) or use the new VT escape codes to have true color.&lt;/li>
&lt;/ul>
&lt;p>TVision2 core offers an API that tries to abstract as mucha as possible the current color model used, while giving full functionality to the application developer. TVision2.Controls extends this API to offer Skins that allow the developer to define the colors of each control based on the color model used (16 colors, 256 colors, etc&amp;hellip;).&lt;/p></description></item><item><title>Docs: Console drivers</title><link>/docs/intro/console-drivers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/intro/console-drivers/</guid><description>
&lt;p>The &lt;em>console driver&lt;/em> is the responsible to flush the real characters to the underlying console and to read the events from the terminal. As an application developer you never interact directly with the &lt;em>console driver&lt;/em> (it is user under the hoods by TVision2), but you still has to select what &lt;em>console driver&lt;/em> to use for your application.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>DotNetConsoleDriver&lt;/code>: This driver uses standard netcore classes (mostly &lt;code>System.Console&lt;/code>) to interact with the real terminal. Its strongest point is that it supports all operating systems where netcore is supported. Its weakness is only supports 16 colors and have no mouse support.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>NcursesConsoleDriver&lt;/code>: This driver uses the &lt;a href="https://en.wikipedia.org/wiki/Ncurses">NCurses&lt;/a> library to adapt to the available terminal. Currently only works in Linux and supports from B/W to 256 colors.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Win32StdConsoleDriver&lt;/code>: This driver uses the &lt;a href="https://docs.microsoft.com/en-us/windows/console/console-functions">Win32 Console API&lt;/a> to interact with the console. It supports any version of Windows but only up to 16 colors and has mouse support.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Win32AnsiSeqConsoleDriver&lt;/code>: This driver uses the new &lt;em>virtual terminal&lt;/em> API that is available in Windows 10. It supports true color and mouse support, but only in Windows 10+.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>TerminfoConsoleDriver&lt;/code>: This &lt;strong>highly experimental&lt;/strong> driver uses plain &lt;a href="https://en.wikipedia.org/wiki/Terminfo">Terminfo&lt;/a> sequences. It supports true color and runs only in Linux.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="choosing-one-console-driver">Choosing one console driver&lt;/h2>
&lt;p>The &lt;strong>best option&lt;/strong> is let TVision2 to choose the best console driver at runtime. This will ensure that a valid console driver is chosen for the OS that is running your app. You can use the &lt;code>UsePlatformConsoleDriver&lt;/code> of &lt;code>Tvision2Setup&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">builder&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UseTvision2&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">setup&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">setup&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UseDotNetConsoleDriver&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default this method will defer to &lt;code>NcursesConsoleDriver&lt;/code> in Linux and &lt;code>Win32StdConsoleDriver&lt;/code> in Windows.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>And MacOS?&lt;/strong> Currently &lt;strong>MacOS is not officially supported. However is in the roadmap&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;p>You can change this behavior by passing an options delegate to the &lt;code>UseDotNetConsoleDriver&lt;/code> to apply some conditional configuration (in run-time):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">setup&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UsePlatformConsoleDriver&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">opt&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000">opt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Configure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Linux specific config
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OnLinux&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lo&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// We want to setup our palette
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">lo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UsePalette&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">p&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Will init the palette using our terminal name (currently only xterm-256color is supported)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">LoadFromTerminalName&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// We want to be able to use RGB colors, but if we are in palette mode (no full direct color)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// we need to setup a translator that translates any RGB color in a palette color.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TranslateRgbColorsWith&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">InterpolationPaletteTranslator&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// EXPERIMENTAL: Use true color support. This forces the use of the TerminfoConsoleDriver driver
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// lo.UseDirectAccess(dop =&amp;gt; dop.UseTrueColor());
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Windows specific config
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OnWindows&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">w&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// We want to use ANSI sequences, allowing full color also. This is only
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// available in Win10. If running in older windows, application will be in
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// basic color mode (16 colors)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">w&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">EnableAnsiSequences&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: The component lifecycles</title><link>/docs/core/component-lifecycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/core/component-lifecycle/</guid><description>
&lt;p>The lifecycle of a component it is very simple. A component can be:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Dettached: The component object is created but is not attached to the tree. TVision2 don&amp;rsquo;t care about a component until it is attached to the tree.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Attached &amp;amp; Running: The component is running and it is attached to the tree. When a component is attached participates from the main loop through the methods &lt;code>Update&lt;/code> and &lt;code>Draw&lt;/code>, until you remove the component from the tree.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="events-and-notifications-when-attaching-a-component">Events and notifications when attaching a component&lt;/h2>
&lt;p>When a component is &lt;strong>attached to the tree&lt;/strong> following events are triggered:&lt;/p>
&lt;ol>
&lt;li>The &lt;code>OnComponentMounted&lt;/code> action from the component metadata is called.&lt;/li>
&lt;li>The &lt;code>ComponentAdded&lt;/code> event from the ComponentTree is triggered&lt;/li>
&lt;li>The &lt;code>AfterAddAction&lt;/code> specified when creating the component (if any) is called&lt;/li>
&lt;li>The &lt;code>TreeUpdated&lt;/code> event from the ComponentTree is triggered&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>Remember that adding a component to the tree is an asynchronous operation and many components can be added in a single &amp;ldquo;add operation&amp;rdquo;. Steps 1,2 and 3 happen once per component and step 4 happen only once per add operation (when all components are added).&lt;/p>
&lt;/blockquote>
&lt;p>When &lt;strong>dettaching&lt;/strong> a component following happens:&lt;/p>
&lt;ol>
&lt;li>The &lt;code>OnComponentWillBeUnmounted&lt;/code> action from the component metadata is invoked. At this point the component can abort the dettach operation.&lt;/li>
&lt;li>The &lt;code>OnComponentUnmounted&lt;/code> action from the component metadata is invoked&lt;/li>
&lt;li>The &lt;code>ComponentRemoved&lt;/code> event from the tree is triggered&lt;/li>
&lt;li>The &lt;code>TreeUpdated&lt;/code> event from the tree is triggered&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>Like adding components, removing is an asynchronous operation. Steps 1, 2 &amp;amp; 3 happen once per each component, and step 4 only once when all components in the &amp;ldquo;remove operation&amp;rdquo; are removed from the tree.&lt;/p>
&lt;/blockquote>
&lt;h2 id="dettaching-a-parent-component">Dettaching a parent component&lt;/h2>
&lt;p>When a component that have childs is dettached, all their childs are dettached too. First the childs are dettached and lastly the parent component is.&lt;/p>
&lt;blockquote>
&lt;p>If &lt;strong>any&lt;/strong> of the childs aborts the dettaching operation (through the &lt;code>OnComponentWillBeUnmounted&lt;/code> action) no component is deleted.&lt;/p>
&lt;/blockquote>
&lt;h2 id="using-the-metadata-actions-of-the-component-lifecycle">Using the Metadata actions of the component lifecycle&lt;/h2>
&lt;p>When creating the component you can add the actions &lt;code>OnComponentMounted&lt;/code>, &lt;code>OnComponentUnmounted&lt;/code> and &lt;code>OnComponentWillBeUnmounted&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">cmp&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TvComponent&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;label&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">cfg&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">cfg&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WhenComponentMounted&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">ComponentMounted&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code creates a component holding an string, and adds the &lt;code>ComponentMounted&lt;/code> action. When adding an action you provide a deletage that will be invoked.&lt;/p>
&lt;p>You can use following methods:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">WhenComponentMounted&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Action&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ComponentMoutingContext&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">mountAction&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">WhenComponentUnmounted&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Action&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ComponentMoutingContext&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">unmountAction&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">WhenComponentWillbeUnmounted&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Action&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ComponentMountingCancellableContext&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">unmountAction&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">WhenChildMounted&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Action&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ChildComponentMoutingContext&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">childMountAction&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">WhenChildUnmounted&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Action&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ChildComponentMoutingContext&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">childUndmountAction&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>WhenComponentMounted&lt;/code> (&lt;code>OnComponentMounted&lt;/code> action): Invoked when the component is mounted&lt;/li>
&lt;li>&lt;code>WhenComponentUnmounted&lt;/code> (&lt;code>OnComponentUnmounted&lt;/code> action): Invoked then the component is unmounted&lt;/li>
&lt;li>&lt;code>WhenComponentWillbeUnmounted&lt;/code> (&lt;code>OnComponentWillbeUnmounted&lt;/code> action): Invoked when the component is about to be invoked giving the chance to the component to abort the operation&lt;/li>
&lt;li>&lt;code>WhenChildMounted&lt;/code> (&lt;code>OnChildMountedAction&lt;/code> action): Invoked when a child component is mounted&lt;/li>
&lt;li>&lt;code>WhenChildUnmounted&lt;/code> (&lt;code>OnChildMountedUnmounted&lt;/code> action): Invoked when a child component is unmounted.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>When adding a component as a child, it is possible to use an option to avoid the &lt;code>OnChildMountedAction&lt;/code> to be called.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Behaviors</title><link>/docs/intro/behaviors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/intro/behaviors/</guid><description>
&lt;p>The &lt;em>behaviors&lt;/em> contains the &lt;strong>logic&lt;/strong> of the component. A single component can have more than one behavior. All behaviors share the state of the component. There are different ways to add a behavior to a component to cover different needs. Let&amp;rsquo;s start with the simplest one&amp;hellip;&lt;/p>
&lt;h2 id="addstatebehavior-new-state-behavior">AddStateBehavior (new state behavior)&lt;/h2>
&lt;p>This method is, probably, the simplest way to add one behavior to one component:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddStateBehavior&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Hello world &amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Random&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">Next&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This method creates a behavior &lt;strong>updates the full state&lt;/strong> of the component. At each iteration the delegate is called and the state of the component is &lt;strong>replaced&lt;/strong> with the state returned by the delegate. Most times this will force the component to redraw itself.&lt;/p></description></item><item><title>Docs: Colors</title><link>/docs/intro/working-with-colors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/intro/working-with-colors/</guid><description>
&lt;p>Dealing with colors is complex, because there are important differences between *NIX and Windows.&lt;/p>
&lt;h2 id="color-modes">Color Modes&lt;/h2>
&lt;p>Your application can run in one of this four colour modes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>NoColor&lt;/code>: No color support. Only B/W&lt;/li>
&lt;li>&lt;code>Basic&lt;/code>: Basic color support (8/16 colors)&lt;/li>
&lt;li>&lt;code>Palettized&lt;/code>: Palettized support. TVision2 supports palettes up to 256 colors.&lt;/li>
&lt;li>&lt;code>Direct&lt;/code>: Direct RGB colors (aka true color)&lt;/li>
&lt;/ul>
&lt;p>The API for colors is built upon the &lt;code>TvColor&lt;/code> type. The &lt;code>TvColor&lt;/code> abstracts three APIs in one:&lt;/p>
&lt;ol>
&lt;li>The RGB API, used when working in direct (full color) mode&lt;/li>
&lt;li>The palette API, used when working in palettized modes (like 256 colors)&lt;/li>
&lt;li>The index API, used when working in fixed-color modes (like 16 colors)&lt;/li>
&lt;/ol>
&lt;p>The &lt;strong>final color mode depends on the operating system, the terminal and your configuration&lt;/strong>:&lt;/p>
&lt;p>If application is running in Windows 7 your application will always be in Basic mode. There is no way, currently, to override this configuration (althought it is in the roadmap, because this would allow run Windows applications in 256 modes through ConEmu or similar). If application is running in Windows 10 you can choose between run Basic, Palettized or Direct color modes.&lt;/p>
&lt;p>In Linux, if the application uses the NCurses console driver (to support old terminals) the color mode can be NoColor, Basic or Palettized. No Direct support is provided through NCurses. To support Direct color mode, you have to use the Ansi console driver (and in this case your application can run in Direct, Palettized or Basic based on your configuration).&lt;/p>
&lt;h2 id="enabling-true-color">Enabling True Color&lt;/h2>
&lt;p>If your OS is capable to use true color (Linux or Windows 10) you can enable true color in your application. This allows the use RGB colors (created using &lt;code>TvColor.FromRGB&lt;/code>). An RGB color is created by using 3 bytes (one for red, one for green, one for blue).&lt;/p>
&lt;blockquote>
&lt;p>To enable true color in Linux you must use the Ansi console driver, there is &lt;strong>no support for true color when using NCurses&lt;/strong>:&lt;/p>
&lt;/blockquote>
&lt;p>Use following code to enable true color in your application:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">setup&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UsePlatformConsoleDriver&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">opt&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">opt&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Configure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OnLinux&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">l&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">l&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UseAnsi&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">EnableTrueColor&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">tc&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">tc&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithBuiltInSequences&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OnWindows&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">w&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">w&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UseAnsi&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">EnableTrueColor&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>In Linux your application can run under a terminal with NO true color support. If you enable true color and use RGB colors when running in a terminal with no true color support, your application will output garbage. Currently TVision2 do not perform any check to ensure that terminal supports true color (and note that there is no any standarized way to do it). We will implement some checks in the future (like reading &lt;code>COLORTERM&lt;/code> environment variable).&lt;/p>
&lt;/blockquote>
&lt;p>If you are in RGB color mode, can create a &lt;code>TvColor&lt;/code> by calling &lt;code>TvColor.FromRGB&lt;/code> method. If you are in palettized mode, you can use &lt;code>TvColor.FromPaletteIndex&lt;/code> and if you are in fixed-color mode you can use &lt;code>TvColor.FromRaw&lt;/code>. Let&amp;rsquo;s discuss all these methods a little further.&lt;/p>
&lt;h2 id="using-palettized-color-mode-up-to-256-colors">Using palettized color mode (up to 256 colors)&lt;/h2>
&lt;p>Most terminals support a 256 colors palette (in Linux this is probably the most common color mode. Most known terminals like &lt;code>xterm-256&lt;/code> work this way). In this mode a color is just an index (from 0 to 255). Usually the first 16 colors are the same that the basic color mode and the colors range from 232-255 are different levels of grey. However every terminal can have its own palette and most terminal emulators let the user define its own palette. To create a palette color use the &lt;code>TvColor.FromPaletteIndex&lt;/code> method.&lt;/p>
&lt;p>TVision2 offers several capabilities when working with palettes. TVision2 creates a palette object (&lt;code>IPalette&lt;/code> instance) to help you dealing with the palettes. A palette contains &lt;strong>a set of colors, with an index, a name and also its RGB components&lt;/strong>. At startup your application can choose how to fill the palette:&lt;/p>
&lt;ol>
&lt;li>Reading the current palette of the terminal&lt;/li>
&lt;li>Reading a definition file&lt;/li>
&lt;/ol>
&lt;p>If you read a palette from a definition file, the palette of your application won&amp;rsquo;t be (probably) the same palette used by the terminal. Note that &lt;strong>always the palette of the terminal is the one that is used&lt;/strong> (that makes sense, as is the terminal the one who renders the application). If your application has one palette and the terminal has another palette, your application can draw something using the color 120 thinking that is a &amp;ldquo;pink&amp;rdquo;, and the final color rendered in screen will be the color 120 of the terminal palette (which can be any other color). However &lt;strong>you can change the palette of the terminal to fit the palette of your application&lt;/strong>. Note that, in Linux, not all terminals support redefining its palette.&lt;/p>
&lt;p>A palette has another possibility: as it contains the RGB components of each color, it is possible &lt;strong>to translate an RGB color to a palettized color&lt;/strong>, that is, finding the color in the palette that is more similar to the RGB color passed. This allows to use RGB colors even though in terminals that do not support true color, but the final colors can be slightly different (as the color used is always one palette color). TVision2 allows you to configure how to convert from RGB colors to palette colors.&lt;/p>
&lt;blockquote>
&lt;p>Technically it is possible to use the palette to transform from a palette color to a RGB one, but this is not useful, because all terminals that support true color, support palette too. So, &lt;strong>you can use a palette color in a true color application&lt;/strong>. If a palettized color is used when the application is configured in true color mode, it will work as expected.&lt;/p>
&lt;/blockquote>
&lt;h3 id="using-ansi-colors-in-palettized-mode">Using ANSI colors in palettized mode&lt;/h3>
&lt;p>In palettized mode, a color is simply an integer with the index of the color in the palette. So, &lt;strong>based on your palette&lt;/strong> the color index 120 can be red, lime or turquoise. Fortunately &lt;strong>most palettes have the same first 16 values like the Ansi 4 bits colors&lt;/strong>. If this is the case, you can use a &lt;code>TvColor&lt;/code> like &lt;code>TvColor.Red&lt;/code> in a palettized application and the result color will be Red. If the first colors of the palette are not like the ANSI standard, you can sill use &lt;code>TvColor.Red&lt;/code> but there is no guarantee that the real color will be red!&lt;/p>
&lt;p>In a palettized color mode, the palette can be &amp;ldquo;fixed&amp;rdquo; or &amp;ldquo;configurable&amp;rdquo;. In a &amp;ldquo;configurable&amp;rdquo; palette you can choose the colors you want to use from a boarder range of colors (like choosing 256 colors from a range of millions). In a &amp;ldquo;fixed&amp;rdquo; palette, the palette is, well, fixed by the terminal, and can&amp;rsquo;t be changed. When working in a palettized mode the main question is &amp;ldquo;how I can know what color is the color index 120?&amp;quot;.&lt;/p>
&lt;h3 id="the-palette-object">The Palette object&lt;/h3>
&lt;p>TVision2 offers the &lt;code>IPalette&lt;/code> interface for this question. And &lt;strong>to simplify your application development, TVision2 will ALWAYS offer you a palette, even though your application is running in a fixed color mode or in RGB mode&lt;/strong>. With the palette you can:&lt;/p>
&lt;ul>
&lt;li>Get a &lt;code>TvColor&lt;/code> from a palette index.&lt;/li>
&lt;li>Get all entries of the palette (their index, and the &lt;code>TvColor&lt;/code> associated with its RGB values).&lt;/li>
&lt;li>Add a new color to the palette. This can only be done if the palette is not fixed (its &lt;code>IsFreezed&lt;/code> property is &lt;code>false&lt;/code>).&lt;/li>
&lt;li>Change a color of the palette (i. e. previously index 120 was dark brown, now is light orange). This can only be done if the palette is not fixed (its &lt;code>IsFreezed&lt;/code> property is &lt;code>false&lt;/code>)&lt;/li>
&lt;li>Get the color mode of the application&lt;/li>
&lt;/ul>
&lt;p>Also, it is possible to configure color converters: a color converter converts a RGB color (created with &lt;code>TvColor.FromRGB&lt;/code>) to a palettized color of the current palette. If configured it allows use RGB colors in a palettized color mode. However final color is just an approximation and there is a penalty hit.&lt;/p>
&lt;blockquote>
&lt;p>Note that when you are in &lt;code>Direct&lt;/code> color mode, you are not using a palette at all. However TVision2 provides you with a palette object, holding the current terminal palette, so you can retrieve colors from this palette and display them in the exact same way yo would do it using the &lt;code>Palettized&lt;/code> color mode.&lt;/p>
&lt;/blockquote>
&lt;h2 id="fixed-color-mode">Fixed color mode&lt;/h2>
&lt;p>Your application will run in fixed color mode in Windows if not using the new &lt;em>virtual terminal&lt;/em>. Only Windows 10 can use the &lt;em>virtual terminal&lt;/em>, so if in Windows 7 your application will be in fixed color mode always. The fixed color mode of Windows is the &amp;ldquo;4 bits ANSI&amp;rdquo; (16 colors). In Linux your application will run in the fixed color mode, based on the terminal of the host.&lt;/p>
&lt;p>There are two main fixed color modes:&lt;/p>
&lt;ul>
&lt;li>Ansi 4 bits (16 colors)&lt;/li>
&lt;li>Ansi 3 bits (8 colors)&lt;/li>
&lt;/ul>
&lt;p>In this color modes, the value of a color is a ANSI standard value. For example, the red is always 4, so you can create the color red by using &lt;code>TvColor.FromRaw(4)&lt;/code>. However as the colors are fixed, TVision2 offers you a set of predefined &lt;code>TvColor&lt;/code> values, so you can use &lt;code>TvColor.Red&lt;/code> instead. There is also a utility class (&lt;code>TvColorNames&lt;/code>) that gives some methods for converting between color names and its integer value in the ANSI standard.&lt;/p>
&lt;p>You can notice that there are only 8 predefined colors in &lt;code>TvColor&lt;/code> (and &lt;code>TvColorNames&lt;/code>): the 8 colors defined in ANSI 3 bits per color. What happens if using ANSI 4 bits (like Windows)? In this mode, the extra 8 colors are the brighten value of the 8 standard ones (i. e. you have red that is 4 and bright red wich is 12). However, you &lt;strong>should not create a bright red color&lt;/strong>. Instead you should use the standard red with the bright attributte applied on it. We will see attributes later when discussing how to do character output.&lt;/p>
&lt;h2 id="direct-color-mode">Direct color mode&lt;/h2>
&lt;p>This is the easiest color mode to deal with, and it is available in Windows 10 and in Linux (using the Ansi console driver). In this color mode, you create the colors by using &lt;code>TvColor.FromRGB&lt;/code>. Although there is no really a palette, TVision2 offers you a palette, that you can setup and fill when starting the app. With this palette you can still use the &lt;code>TvColor.FromPaletteIndex&lt;/code> for the palettized colors. Of course, you can choose to &lt;strong>not load&lt;/strong> a palette, and in this case the palette provided to you will contain only the ANSI colors (so, yes: &lt;code>TvColor.Red&lt;/code> works in direct color mode, and it is still red).&lt;/p>
&lt;p>To enable this color mode you must call &lt;code>EnableTrueColor()&lt;/code> when configuring the terminal. Otherwise TVision2 will default to palettized color mode.&lt;/p></description></item></channel></rss>