<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tvision2docs â€“ Introduction</title><link>/docs/intro/</link><description>Recent content in Introduction on tvision2docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/intro/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Hello world!</title><link>/docs/intro/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/intro/hello-world/</guid><description>
&lt;p>Let&amp;rsquo;s see how we can create a &amp;ldquo;Hello World&amp;rdquo; program using TVision2. First, the code:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">Microsoft.Extensions.Hosting&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">System&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">System.Threading.Tasks&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">Microsoft.Extensions.DependencyInjection&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">Tvision2.Core&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">Tvision2.Core.Colors&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">Tvision2.Core.Components&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">using&lt;/span> &lt;span style="color:#000">Tvision2.Core.Render&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">namespace&lt;/span> &lt;span style="color:#000">Tvision2.HelloWorld&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">internal&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Program&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">async&lt;/span> &lt;span style="color:#000">Task&lt;/span> &lt;span style="color:#000">Main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">builder&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">HostBuilder&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">builder&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UseTvision2&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">setup&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">setup&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UseDotNetConsoleDriver&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">setup&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Options&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UseStartup&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">sp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">tui&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">helloWorld&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TvComponent&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello world!&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddDrawer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DrawStringAt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">State&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">TvPoint&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Zero&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TvColorPair&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvColor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Blue&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">TvColor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Yellow&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddViewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Viewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvPoint&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FromXY&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#000">tui&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UI&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">Task&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">CompletedTask&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#000;font-weight:bold">}).&lt;/span>&lt;span style="color:#000">UseConsoleLifetime&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">builder&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">RunTvisionConsoleApp&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code the &lt;code>Hello world!&lt;/code> string at position (10,10) with a blue foreground and a yellow background. Yes, probably you are thinking &amp;ldquo;that&amp;rsquo;s a lot of code for just printing a string&amp;rdquo; and you are true, but this is just because the sample is too simple to show all TVision2 power. But anyway, let&amp;rsquo;s see the main components of it.&lt;/p>
&lt;p>First, you need to configure some aspects of TVision2 before starting your app. This is done through the extension method &lt;code>UseTvision2&lt;/code> of the &lt;code>IHostBuilder&lt;/code> interface. That method expects an &lt;code> Action&amp;lt;Tvision2Setup&amp;gt;&lt;/code> with the setup code. In this case we are using the &lt;code>UseDotNetConsoleDriver&lt;/code> that forces TVision2 to use the pure netcore-based console driver. A console driver is how TVision2 will interact with the real console (as you will see, as a developer, you never access directly to the console). There are various console drivers, each one with their weaknesses and strenghtnesses.&lt;/p>
&lt;p>Then, we are using the simplest way to start the application which is using the &lt;code>UseStartup&lt;/code> method to provide the code of our application. On more complex applications another way (using a separated &lt;em>startup&lt;/em> class) is preferred. When using &lt;code>UseStartup&lt;/code> you have access to two parameters: an &lt;code>IServiceProvider&lt;/code> which gives you access to some TVision2 objects and a &lt;code>ITuiEngine&lt;/code> wich holds the TVision2 engine. In the &lt;code>UseStartup&lt;/code> method we do following things:&lt;/p>
&lt;ol>
&lt;li>Create a &lt;code>TvComponent&amp;lt;string&amp;gt;&lt;/code> class. This creates a &lt;em>component&lt;/em> that holds an &lt;code>string&lt;/code> object. Components are the main objects in TVision2: your application is composed of a set of components that interact. All components are instances of the &lt;strong>sealed&lt;/strong> &lt;code>TvComponent&amp;lt;T&amp;gt;&lt;/code> class. TVision2 prefers composition over inheritance, so &lt;strong>you can&amp;rsquo;t inherit from &lt;code>TvComponent&amp;lt;T&amp;gt;&lt;/code>&lt;/strong>.&lt;/li>
&lt;li>Then we add a drawer to our component. A drawer is a piece of code that draws the component to a &lt;em>viewport&lt;/em>. All drawers use the methods provide in the &lt;code>RenderContext&lt;/code> class to draw to the &lt;em>viewport&lt;/em>. In this sample the viewport is located at coords (10,10) and have a bounds of 30 cols and one row.&lt;/li>
&lt;li>Then we use the &lt;code>AddViewport&lt;/code> method to add a &lt;em>viewport&lt;/em> to the component. A &lt;em>viewport&lt;/em> is a region (position, bounds and layer) in the console window. A component can only draw in its own &lt;em>viewport&lt;/em>.&lt;/li>
&lt;li>Finally we add the component to the &lt;em>component tree&lt;/em> using the &lt;code>Add&lt;/code> method of the &lt;code>UI&lt;/code> property of the engine. The component is now added to the tree and TVision2 will begin drawing it.&lt;/li>
&lt;/ol>
&lt;p>Congratulations! You have finished your first TVision2 app! Now, we&amp;rsquo;ll do some changes to it to see some of the TVision2 characteristics :)&lt;/p>
&lt;h2 id="updating-a-component">Updating a component&lt;/h2>
&lt;p>If you put a breakpoint in the &lt;code>ctx.Drawstring&lt;/code> line you&amp;rsquo;ll see that &lt;strong>the breakpoint is only hit once&lt;/strong>. This is because once a component is drawn, it won&amp;rsquo;t be drawn again &lt;strong>until it changes&lt;/strong>. This raises the question on how TVision2 knows if a component &amp;ldquo;has changed&amp;rdquo; and need to be redrawn. Well, a component needs to be redrawn if &lt;strong>its state has changed&lt;/strong>. The &amp;ldquo;state&amp;rdquo; of a component is the additional object it holds (in our example is a string, because we are using a &lt;code>TvComponent&amp;lt;string&amp;gt;&lt;/code> object). For changing a state of a component there is a &lt;code>SetState&lt;/code> method. However &lt;strong>this won&amp;rsquo;t work&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddDrawer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DrawStringAt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">State&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">TvPoint&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Zero&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TvColorPair&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvColor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Blue&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">TvColor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Yellow&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetState&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello world! &amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Random&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">Next&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is &lt;strong>a very bad practice&lt;/strong>. You should never access to the component from inside the &lt;code>AddDrawer&lt;/code> method (in this case you have access to it because this is a sample code, but in more complex applications, usually the drawer do not have access to the reference that holds the component). Anyway, this does not work because &lt;strong>TVision2 assumes that drawing the component NEVER change its state&lt;/strong>. TVision2 has an specific way to change the state of a component, which is &lt;strong>using a behavior&lt;/strong>. We will use the &lt;code>AddStateBehavior&lt;/code> method to add a behavior to a component:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddStateBehavior&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Hello world &amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Random&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">Next&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you run the application again you will see how the content of the label is changing continuously.&lt;/p>
&lt;blockquote>
&lt;p>Note that we don&amp;rsquo;t call the &lt;code>SetState&lt;/code> method of the &lt;code>TvComponent&lt;/code>. The &lt;code>SetState&lt;/code> method is rarely used, but it is provided to some advanced scenarios. The standard way to update a component is using a behavior.&lt;/p>
&lt;/blockquote>
&lt;p>A component &lt;strong>can have zero or more behaviors&lt;/strong> and there are many ways to add a behavior to a component. We have used the &lt;code>AddStateBehavior(Func&amp;lt;T,T&amp;gt;)&lt;/code> method which is the simplest one, but there are other ways. We will discuss all of them in the behaviors section.&lt;/p>
&lt;blockquote>
&lt;p>Remember: To change the state of a component &lt;strong>try to use always a behavior&lt;/strong>. Use &lt;code>SetState&lt;/code> method, only when you need to change the state of another component.&lt;/p>
&lt;/blockquote>
&lt;h2 id="adding-more-than-one-viewport">Adding more than one viewport&lt;/h2>
&lt;p>A component can have more than one viewport:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddViewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Viewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvPoint&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FromXY&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddViewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Viewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvPoint&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FromXY&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#000">helloWorld&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddViewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Viewport&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvPoint&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FromXY&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">20&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">13&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you run the code, you will see &lt;strong>three labels&lt;/strong> all with the same content and changing at the same time.&lt;/p></description></item><item><title>Docs: Console drivers</title><link>/docs/intro/console-drivers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/intro/console-drivers/</guid><description>
&lt;p>The &lt;em>console driver&lt;/em> is the responsible to flush the real characters to the underlying console and to read the events from the terminal. As an application developer you never interact directly with the &lt;em>console driver&lt;/em> (it is user under the hoods by TVision2), but you still has to select what &lt;em>console driver&lt;/em> to use for your application.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>DotNetConsoleDriver&lt;/code>: This driver uses standard netcore classes (mostly &lt;code>System.Console&lt;/code>) to interact with the real terminal. Its strongest point is that it supports all operating systems where netcore is supported. Its weakness is only supports 16 colors and have no mouse support.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>NcursesConsoleDriver&lt;/code>: This driver uses the &lt;a href="https://en.wikipedia.org/wiki/Ncurses">NCurses&lt;/a> library to adapt to the available terminal. Currently only works in Linux and supports from B/W to 256 colors.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Win32StdConsoleDriver&lt;/code>: This driver uses the &lt;a href="https://docs.microsoft.com/en-us/windows/console/console-functions">Win32 Console API&lt;/a> to interact with the console. It supports any version of Windows but only up to 16 colors and has mouse support.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Win32AnsiSeqConsoleDriver&lt;/code>: This driver uses the new &lt;em>virtual terminal&lt;/em> API that is available in Windows 10. It supports true color and mouse support, but only in Windows 10+.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>TerminfoConsoleDriver&lt;/code>: This &lt;strong>highly experimental&lt;/strong> driver uses plain &lt;a href="https://en.wikipedia.org/wiki/Terminfo">Terminfo&lt;/a> sequences. It supports true color and runs only in Linux.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="choosing-one-console-driver">Choosing one console driver&lt;/h2>
&lt;p>The &lt;strong>best option&lt;/strong> is let TVision2 to choose the best console driver at runtime. This will ensure that a valid console driver is chosen for the OS that is running your app. You can use the &lt;code>UsePlatformConsoleDriver&lt;/code> of &lt;code>Tvision2Setup&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">builder&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UseTvision2&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">setup&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">setup&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UseDotNetConsoleDriver&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default this method will defer to &lt;code>NcursesConsoleDriver&lt;/code> in Linux and &lt;code>Win32StdConsoleDriver&lt;/code> in Windows.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>And MacOS?&lt;/strong> Currently &lt;strong>MacOS is not officially supported. However is in the roadmap&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;p>You can change this behavior by passing an options delegate to the &lt;code>UseDotNetConsoleDriver&lt;/code> to apply some conditional configuration (in run-time):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">setup&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UsePlatformConsoleDriver&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">opt&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000">opt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Configure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Linux specific config
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OnLinux&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lo&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// We want to setup our palette
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">lo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UsePalette&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">p&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Will init the palette using our terminal name (currently only xterm-256color is supported)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">LoadFromTerminalName&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// We want to be able to use RGB colors, but if we are in palette mode (no full direct color)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// we need to setup a translator that translates any RGB color in a palette color.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TranslateRgbColorsWith&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">InterpolationPaletteTranslator&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// EXPERIMENTAL: Use true color support. This forces the use of the TerminfoConsoleDriver driver
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// lo.UseDirectAccess(dop =&amp;gt; dop.UseTrueColor());
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Windows specific config
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OnWindows&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">w&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// We want to use ANSI sequences, allowing full color also. This is only
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// available in Win10. If running in older windows, application will be in
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// basic color mode (16 colors)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">w&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">EnableAnsiSequences&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Colors</title><link>/docs/intro/working-with-colors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/intro/working-with-colors/</guid><description>
&lt;p>Dealing with colors is complex, because there are important differences between *NIX and Windows. The API for colors is built upon the &lt;code>TvColor&lt;/code> type. The &lt;code>TvColor&lt;/code> abstracts three APIs in one:&lt;/p>
&lt;ol>
&lt;li>The RGB API, used when working in direct (full color) mode&lt;/li>
&lt;li>The palette API, used when working in palettized modes (like 256 colors)&lt;/li>
&lt;li>The index API, used when working in fixed-color modes (like 16 colors)&lt;/li>
&lt;/ol>
&lt;p>If you are in RGB color mode, can create a &lt;code>TvColor&lt;/code> by calling &lt;code>TvColor.FromRGB&lt;/code> method. If you are in palettized mode, you can use &lt;code>TvColor.FromPaletteIndex&lt;/code> and if you are in fixed-color mode you can use &lt;code>TvColor.FromRaw&lt;/code>. Let&amp;rsquo;s discuss all these methods a little further.&lt;/p>
&lt;h2 id="fixed-color-mode">Fixed color mode&lt;/h2>
&lt;p>Your application will run in fixed color mode in Windows if not using the new &lt;em>virtual terminal&lt;/em>. Only Windows 10 can use the &lt;em>virtual terminal&lt;/em>, so if in Windows 7 your application will be in fixed color mode always. The fixed color mode of Windows is the &amp;ldquo;4 bits ANSI&amp;rdquo; (16 colors). In Linux your application will run in the fixed color mode, based on the terminal of the host.&lt;/p>
&lt;p>There are two main fixed color modes:&lt;/p>
&lt;ul>
&lt;li>Ansi 4 bits (16 colors)&lt;/li>
&lt;li>Ansi 3 bits (8 colors)&lt;/li>
&lt;/ul>
&lt;p>In this color modes, the value of a color is a ANSI standard value. For example, the red is always 4, so you can create the color red by using &lt;code>TvColor.FromRaw(4)&lt;/code>. However as the colors are fixed, TVision2 offers you a set of predefined &lt;code>TvColor&lt;/code> values, so you can use &lt;code>TvColor.Red&lt;/code> instead. There is also a utility class (&lt;code>TvColorNames&lt;/code>) that gives some methods for converting between color names and its integer value in the ANSI standard.&lt;/p>
&lt;p>You can notice that there are only 8 predefined colors in &lt;code>TvColor&lt;/code> (and &lt;code>TvColorNames&lt;/code>): the 8 colors defined in ANSI 3 bits per color. What happens if using ANSI 4 bits (like Windows)? In this mode, the extra 8 colors are the brighten value of the 8 standard ones (i. e. you have red that is 4 and bright red wich is 12). However, you &lt;strong>should not create a bright red color&lt;/strong>. Instead you should use the standard red with the bright attributte applied on it. We will see attributes later when discussing how to do character output.&lt;/p>
&lt;h2 id="palettized-color-mode">Palettized color mode&lt;/h2>
&lt;p>In &lt;strong>Windows the palettized color mode is NEVER used&lt;/strong>, but in Linux is the most common one. Most known terminals like &lt;code>xterm-256&lt;/code> works this way. In this mode, a color is simply an integer with the index of the color in the palette. So, &lt;strong>based on your palette&lt;/strong> the color index 120 can be red, lime or turquoise. Fortunately &lt;strong>most palettes have the same first 16 values like the Ansi 4 bits colors&lt;/strong>. If this is the case, you can use a &lt;code>TvColor&lt;/code> like &lt;code>TvColor.Red&lt;/code> in a palettized application and the result color will be Red. If the first colors of the palette are not like the ANSI standard, you can sill use &lt;code>TvColor.Red&lt;/code> but there is no guarantee that the real color will be red!&lt;/p>
&lt;p>In a palettized color mode, the palette can be &amp;ldquo;fixed&amp;rdquo; or &amp;ldquo;configurable&amp;rdquo;. In a &amp;ldquo;configurable&amp;rdquo; palette you can choose the colors you want to use from a boarder range of colors (like choosing 256 colors from a range of millions). In a &amp;ldquo;fixed&amp;rdquo; palette, the palette is, well, fixed by the terminal, and can&amp;rsquo;t be changed. When working in a palettized mode the main question is &amp;ldquo;how I can know what color is the color index 120?&amp;quot;.&lt;/p>
&lt;p>TVision2 offers the &lt;code>IPalette&lt;/code> interface for this question. And &lt;strong>to simplify your application development, TVision2 will ALWAYS offer you a palette, even though your application is running in a fixed color mode or in RGB mode&lt;/strong>. With the palette you can:&lt;/p>
&lt;ul>
&lt;li>Get a &lt;code>TvColor&lt;/code> from a palette index.&lt;/li>
&lt;li>Get all entries of the palette (their index, and the &lt;code>TvColor&lt;/code> associated)&lt;/li>
&lt;li>Add a new color to the palette. This can only be done if the palette is not fixed (its &lt;code>IsFreezed&lt;/code> property is &lt;code>false&lt;/code>).&lt;/li>
&lt;li>Change a color of the palette (i. e. previously index 120 was dark brown, now is light orange). This can only be done if the palette is not fixed (its &lt;code>IsFreezed&lt;/code> property is &lt;code>false&lt;/code>)&lt;/li>
&lt;li>Get the color mode of the application&lt;/li>
&lt;/ul>
&lt;p>Also, it is possible to configure color converters: a color converter converts a RGB color (created with &lt;code>TvColor.FromRGB&lt;/code>) to a palettized color of the current palette.&lt;/p>
&lt;h2 id="direct-color-mode">Direct color mode&lt;/h2>
&lt;p>This is the easiest color mode to deal with, and it is available in Windows 10 and in Linux (but using an experimental console driver). In this color mode, you create the colors by using &lt;code>TvColor.FromRGB&lt;/code>. Although there is no really a palette, TVision2 offers you a palette, that you can setup and fill when starting the app. With this palette you can still use the &lt;code>TvColor.FromPaletteIndex&lt;/code> for the palettized colors. Of course, you can choose to &lt;strong>not load&lt;/strong> a palette, and in this case the palette provided to you will contain only the ANSI colors (so, yes: &lt;code>TvColor.Red&lt;/code> works in direct color mode, and it is still red).&lt;/p></description></item></channel></rss>