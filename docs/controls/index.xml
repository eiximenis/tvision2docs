<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tvision2docs â€“ TvControls - The control library</title><link>/docs/controls/</link><description>Recent content in TvControls - The control library on tvision2docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/controls/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: What is a control?</title><link>/docs/controls/what-is-a-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/controls/what-is-a-control/</guid><description>
&lt;p>TVision2 Core offers a &lt;em>game loop&lt;/em> application model: at each cycle all components have the chance to update and redraw themselves. Each component receives a list of all events produced during that cycle, and the component can handle all of some if it wants.&lt;/p>
&lt;p>This model works great on games, but is not how we usually think when we build an UI based application. Almost all UI frameworks are &amp;ldquo;event-based&amp;rdquo;: you create some sort of element, let&amp;rsquo;s say a button, and then attach some code when some events happen on this button. If user clicks the button (the event) something happens (the attached code, aka the handler).&lt;/p>
&lt;p>TvControls offers a set of controls that allow you to use this event-based model approach for building your application. If using TvControls you can forget about the &amp;ldquo;game loop&amp;rdquo; at all. Of course, it is still running, but your code have to react only to the events generated by the controls you create.&lt;/p>
&lt;h2 id="controls-versus-components">Controls versus components&lt;/h2>
&lt;p>TvControls is built on top of TVision2 Core and &lt;strong>do not replaces it&lt;/strong>. You don&amp;rsquo;t have to choose between using TvControls &lt;em>or&lt;/em> TVision2 Core. You can use both of them simultaniously if you want. A key concept of TvControls is that &lt;strong>every control should behave like a standard component in all the contexts where a component is expected&lt;/strong>.&lt;/p>
&lt;p>Controls are internally implemented using TVision2 Core components, but this components are wrapped inside a control class which provides all extra functionality that is needed for the event-model approach to work.&lt;/p>
&lt;p>You can &amp;ldquo;convert&amp;rdquo; every control to a standard component using the &lt;code>AsComponent()&lt;/code> method that all controls provide.&lt;/p>
&lt;h2 id="the-tvcontrolt-class">The &lt;code>TvControl&amp;lt;T&amp;gt;&lt;/code> class&lt;/h2>
&lt;p>The &lt;code>TvControl&amp;lt;T&amp;gt;&lt;/code> class is the base class for all controls. &lt;strong>All controls inherit from TvControl&lt;T>&lt;/strong>. This class wraps an instance of &lt;code>TvComponent&amp;lt;T&amp;gt;&lt;/code> which is the underlying TVision2 Core component that implements the control. The class &lt;code>TvControl&amp;lt;T&amp;gt;&lt;/code> implements the &lt;code>ITvControl&lt;/code> interface.&lt;/p>
&lt;p>You can add a control &lt;strong>exactly in the same way that do you can add a component&lt;/strong>, that is through the method &lt;code>Add&lt;/code> of the &lt;code>UI&lt;/code> property of the &lt;code>ITuiEngine&lt;/code> object:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">tui&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UI&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">myControl&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// myControl is an instance of any control class
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code compiles because TvControls offers an extension method over the &lt;code>IComponentTree&lt;/code> to accept any &lt;code>ITvControl&lt;/code> instance. However this method is only provided for easy of use. Do you remember that you can use a control in every context that a standard core component is used? So, if you want you can use the following code to add your control, and it will still work (and behave) like a control:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">tui&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UI&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">myControl&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AsComponent&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Creating child controls</title><link>/docs/controls/creating-child-controls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/controls/creating-child-controls/</guid><description>
&lt;p>When a control creates another control (for performing some task), the other control is usually a &amp;ldquo;child control&amp;rdquo; (although TvControls does not enforce that). Usually the &lt;code>AddAsChild&lt;/code> method is used to add the new control.&lt;/p>
&lt;p>You can add a child control whenever you need, but there are some important things to keep in mind. Let&amp;rsquo;s see them all :)&lt;/p>
&lt;h2 id="creating-the-child-control">Creating the child control&lt;/h2>
&lt;p>To add a child control you need a reference to the &lt;em>components tree&lt;/em>. You can obtain this reference through the &lt;code>OnControlMounted&lt;/code> method:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">IComponentTree&lt;/span> &lt;span style="color:#000">_componentTree&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">protected&lt;/span> &lt;span style="color:#204a87;font-weight:bold">override&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">OnControlMounted&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ITuiEngine&lt;/span> &lt;span style="color:#000">engine&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_componentTree&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">engine&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UI&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When you need you can use the &lt;code>AddAsChild&lt;/code> method. The following control adds the &lt;code>menu&lt;/code> control:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &lt;span style="color:#000">_componentTree&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddAsChild&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">menu&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Important!&lt;/strong> Remember that adding a component (thus adding a control too) is an asynchronous operation!&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>You can &lt;strong>add a child control before adding the parent control&lt;/strong>, but in this case adding the child control will be deferred until the parent is added.&lt;/p>
&lt;/blockquote>
&lt;h2 id="setting-the-focus-to-a-newly-created-component">Setting the focus to a newly created component&lt;/h2>
&lt;p>There are several ways to do it. But, as adding a control is an asynchronous operation, the &lt;strong>most obvious way to create a control and set the focus to it, do NOT work&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &lt;span style="color:#000">_componentTree&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddAsChild&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">menu&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">menu&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Focus&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// probably won&amp;#39;t work because menu could not be added yet!
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You need to ensure that the component is created before setting the focus. A simple way is to add the &lt;code>OnComponentMounted&lt;/code> event to the child control to focus the control when added:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#000">_list&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TvList&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">MenuEntry&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;(&lt;/span>&lt;span style="color:#000">builder&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">_list&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AsComponent&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OnComponentMounted&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddOnce&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_list&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Focus&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Can use also: ctx.ControlMetadata().Focus() if not reference to control is available
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="capturing-the-focus">Capturing the focus&lt;/h2>
&lt;p>A control can capture the focus. When the focus is captured &lt;strong>only itself and their descendants can be focused&lt;/strong>. A typical example of capturing the focus is creating a Dialog. When the dialog is shown, you want to iterate only over the controls of the dialog.&lt;/p>
&lt;p>A control can capture the focus by calling &lt;code>CaptureFocus()&lt;/code> from its &lt;code>Metadata&lt;/code> property.&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>CaptureFocus&lt;/code> &lt;strong>do not&lt;/strong> perform any focus change. If the focus is set to a control that is not descendant of the control that captured the focus, this control will be focused after calling &lt;code>CaptureFocus&lt;/code>. However when the focus changes for any reason (like user pressing &lt;code>TAB&lt;/code>) only the control that called &lt;code>CaptureFocus&lt;/code> and its descendants could be focused.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Focus management</title><link>/docs/controls/focus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/controls/focus/</guid><description>
&lt;p>The controls have a new concept that the standard components are unaware of: the focus. In TVision2 Core there is no concept of &amp;ldquo;focused&amp;rdquo; components. &lt;strong>All components receive all pending events&lt;/strong>. So, TvControls has to implement the focus management itself in a independent way, and it does basically through the &lt;code>ControlsTree&lt;/code>.&lt;/p>
&lt;h2 id="the-controls-tree">The controls tree&lt;/h2>
&lt;p>The controls tree is just an structure in memory that contains all controls and their relationships. It is an analoug of the &lt;em>Component tree&lt;/em> but only for controls.&lt;/p>
&lt;p>The controls tree is synchronized with the components tree: when a component is added/removed from the components tree, it is automatically added/removed from the controls tree, if this component is wrapped by a control. The controls tree is needed because TvControls needs a efficient way to mantain a list of controls only.&lt;/p>
&lt;p>You &lt;strong>never add or remove a control from the controls tree&lt;/strong> (there are no methods for doing that). You always add the controls to the components tree (as any other component) and then let the controls tree to synchronize automatically.&lt;/p>
&lt;blockquote>
&lt;p>The controls tree use the components tree events (like &lt;code>OnComponentRemoved&lt;/code> and &lt;code>OnComponentsTreeUpdated&lt;/code>) to perform this synchronization.&lt;/p>
&lt;/blockquote>
&lt;h2 id="handling-the-focus-change-key">Handling the focus change key&lt;/h2>
&lt;p>All UI based applications have some way to change the current focused control (usually this is done by pressing the &lt;code>TAB&lt;/code> key). When you configure TvControls, a &lt;em>Hook&lt;/em> is installed for you. This &lt;em>Hook&lt;/em> intercepts all &lt;code>TAB&lt;/code> keystrokes and interacts with the controls tree to perform a focus change.&lt;/p>
&lt;blockquote>
&lt;p>Remember that a &lt;em>hook&lt;/em> is, basically, an event handler that is guaranteed to run &lt;strong>before any component behavior&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="what-is-a-focused-control">What is a focused control?&lt;/h2>
&lt;p>The concept of &amp;ldquo;focused control&amp;rdquo; is more complex that it seems. Let&amp;rsquo;s summarize concepts:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Only one control&lt;/strong> has the focus at each time&lt;/li>
&lt;li>There could be controls that &lt;strong>never&lt;/strong> can have the focus&lt;/li>
&lt;li>&lt;strong>This is the only control&lt;/strong> that receive the events, however&amp;hellip;&lt;/li>
&lt;li>&amp;hellip; events bubble up to the parent control if not handled&lt;/li>
&lt;li>Focused control &lt;strong>usually displays it different&lt;/strong> showing some highlight colors or indications that it has the focus, however&amp;hellip;&lt;/li>
&lt;li>&amp;hellip; sometimes we want a control that is &lt;strong>not really focused&lt;/strong> render itself as focused. In thoses cases we say the control is &amp;ldquo;virtually focused&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>A &amp;ldquo;virtually focused&amp;rdquo; control is a control that do not have the focus itself but is rendered as it did.&lt;/p>
&lt;/blockquote>
&lt;p>A good example of last point is a menu bar. Menu bar can be the really focused control, but when we open a menu from the menu bar, the control goes to the menu itself. But we want the menu bar still renders as focused.&lt;/p>
&lt;p>Really using &lt;code>TvMenuBar&lt;/code> the situation is a even a little more complex: The menu bar creates a &lt;code>TvMenu&lt;/code> control to display the menu and transfer the focus to the &lt;code>TvMenu&lt;/code>. However the &lt;code>TvMenu&lt;/code> is a non-focusable control, that creates a child &lt;code>TvList&lt;/code> control to show the menu. At this point the status is:&lt;/p>
&lt;ul>
&lt;li>&lt;code>TvList&lt;/code> is the real focused control (&lt;code>ControlsTree.CurrentFocused()&lt;/code> will return that control).&lt;/li>
&lt;li>&lt;code>TvMenu&lt;/code> do not have focus never (it is created as a non-focusable control)&lt;/li>
&lt;li>&lt;code>TvMenuBar&lt;/code> still displays as focused, because it is &amp;ldquo;virtually focused&amp;rdquo; because one descendant control (the &lt;code>TvList&lt;/code>) has the real focus.&lt;/li>
&lt;li>When pressing a key, the event goes to the &lt;code>TvList&lt;/code> control (is the real focused control). If &lt;code>TvList&lt;/code> control do not process the event, it bubbles to the &lt;code>TvMenu&lt;/code>. If &lt;code>TvMenu&lt;/code> do not process the event it bubles to the &lt;code>TvMenuBar&lt;/code>. To handle the event the associated behavior &lt;strong>must call&lt;/strong> the &lt;code>Handle()&lt;/code> method of the event received, to mark it as &amp;ldquo;handled&amp;rdquo;. Note that one behavior can perform some action when it receives an event, and if the &lt;code>Handle()&lt;/code> method is not call, the event will still bubble up. This allows scenarios where both, child and parent must do something on a given event.&lt;/li>
&lt;/ul>
&lt;h2 id="create-virtually-focused-controls">Create virtually focused controls&lt;/h2>
&lt;p>To create a virtually focused control you must override the &lt;code>ConfigureMetadataOptions&lt;/code> method of &lt;code>TvControl&lt;/code> and call the &lt;code>IsFocused()&lt;/code> method in the &lt;code>options&lt;/code> parameter. This method gives you access to the focus configuration object (&lt;code>ITvControlMetadataWhenFocusedOptions&lt;/code> interface), and you must call &lt;strong>only one&lt;/strong> of the following methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Never()&lt;/code>: Control never has the focus. It is non-focusable.&lt;/li>
&lt;li>&lt;code>OnlyWhenAnyChildHasFocus()&lt;/code>: Control is non-focusable, but is virtually focused if any of its descendants is the focused control.&lt;/li>
&lt;li>&lt;code>OnlyWhen(Func&amp;lt;bool&amp;gt; hasFocus)&lt;/code>: Control is non-focusable, but is virtually focused when the predicate &lt;code>hasFocus&lt;/code> evaluates to &lt;code>true&lt;/code>.&lt;/li>
&lt;li>&lt;code>WhenItselfOrAnyChildHasFocus()&lt;/code>: Control is focusable and it is virtually focused when itself or any of its descendants is the focused control.&lt;/li>
&lt;li>&lt;code>WhenItselfOr(Func&amp;lt;bool&amp;gt; hasFocus)&lt;/code>: Control is focusable and it is virtually focused when itself is the focused control or the predicate &lt;code>hasFocus&lt;/code> evaluates to &lt;code>true&lt;/code>.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#204a87;font-weight:bold">protected&lt;/span> &lt;span style="color:#204a87;font-weight:bold">override&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">ConfigureMetadataOptions&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TvControlMetadataOptions&lt;/span> &lt;span style="color:#000">options&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">options&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IsFocused&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">WhenItselfOrAnyChildHasFocus&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>If you don&amp;rsquo;t call &lt;code>IsFocused()&lt;/code> the control is focusable it is virtually focused only when it has the real focus.&lt;/p>
&lt;/blockquote>
&lt;h2 id="focustransferred-vs-isfocused">FocusTransferred vs IsFocused&lt;/h2>
&lt;p>The &lt;code>Metadata&lt;/code> property of a control contains two properties to know if a control is focused:&lt;/p>
&lt;ul>
&lt;li>&lt;code>IsFocused&lt;/code>: Returns &lt;code>true&lt;/code> if the control is the focused one &lt;strong>or&lt;/strong> if the control is virtually focused.&lt;/li>
&lt;li>&lt;code>FocusTransferred&lt;/code>: Returns &lt;code>true&lt;/code> if the control is the focused one.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>At a given time only one control can have the &lt;code>FocusTransferred&lt;/code> property to &lt;code>true&lt;/code>, but more than one control can have the &lt;code>IsFocused&lt;/code> property to to &lt;code>true&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="handling-the-focus-manually">Handling the focus manually&lt;/h2>
&lt;p>Sometimes you need to &lt;strong>handle the focus maually&lt;/strong>: force some specific control gain focus, or avoid the focus going to specific set of controls. If you are creating complex controls this is usually needed.&lt;/p>
&lt;p>The &lt;code>Metadata&lt;/code> property of a control offers some methods to manual control the focus:&lt;/p>
&lt;ul>
&lt;li>&lt;code>CaptureFocus()&lt;/code>: Capture the focus (only child controls can be focused)&lt;/li>
&lt;li>&lt;code>ReleaseFocus()&lt;/code>: Release the focus (if was captured by any control)&lt;/li>
&lt;li>&lt;code>ReturnFocusToPrevious()&lt;/code>: Returns the focus to previously focused control&lt;/li>
&lt;li>&lt;code>IsFocused&lt;/code>: Returns &lt;code>true&lt;/code> if control has focus or is virtually focused&lt;/li>
&lt;li>&lt;code>Focus(bool force = false)&lt;/code>: Transfers focus to the current control. If &lt;code>force&lt;/code> is &lt;code>true&lt;/code> focus is transferred regardless of the &lt;code>CanFocus&lt;/code> property value.&lt;/li>
&lt;li>&lt;code>CanFocus&lt;/code>: If &lt;code>true&lt;/code> the control can have the focus. If &lt;code>false&lt;/code> the control is non-focusable.&lt;/li>
&lt;li>&lt;code>FocusTransferred&lt;/code>: Values &lt;code>true&lt;/code> if the control is the one currently focused&lt;/li>
&lt;li>&lt;code>IsFocused&lt;/code>: Values &lt;code>true&lt;/code> if the control is the one currently focused or if the control is virtually focused.&lt;/li>
&lt;/ul>
&lt;h2 id="accessing-the-controls-tree">Accessing the controls tree&lt;/h2>
&lt;p>You usually won&amp;rsquo;t need access to the &lt;em>controls tree&lt;/em>. However you can access it through the extension method &lt;code>GetControlsTree()&lt;/code> from &lt;code>ITuiEngine&lt;/code>. The &lt;em>controls tree&lt;/em> exposes the event &lt;code>FocusChanged&lt;/code> raised when the focus change.&lt;/p></description></item><item><title>Docs: Using TvControls</title><link>/docs/controls/using-tvcontrols/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/controls/using-tvcontrols/</guid><description>
&lt;p>To use TvControls &lt;strong>you must include the reference to it Nuget package&lt;/strong> and configure your application to use TvControls:&lt;/p>
&lt;pre>&lt;code>var builder = new HostBuilder();
builder.UseTvision2(setup =&amp;gt; setup
.AddTvControls(sk =&amp;gt; sk.AddMcStyles()));
&lt;/code>&lt;/pre>&lt;p>The &lt;code>AddTvControls&lt;/code> method adds TvControls to your library. The method accepts an optional delegate of type &lt;code>Action&amp;lt;ISkinManagerBuilder&amp;gt;&lt;/code> to configure the theme used by all the controls of the application.&lt;/p>
&lt;h2 id="the-hello-world-using-controls">The Hello World using controls&lt;/h2></description></item></channel></rss>